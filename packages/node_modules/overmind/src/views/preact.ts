import * as Preact from 'preact'
import { h } from 'preact'
import App, { ActionsCallback, ReactionsCallback, EventType } from '../'

export { TEffects, TAction, namespaces } from '../'

export type IPreactComponent<P = any> = Preact.Component<P>

export type TConnect<State = {}, Actions = {}> = {
  app: {
    state: State
    actions: Actions
    reaction: (name: string, stateCb: (state: State) => any, Function) => void
  }
}

// Diff / Omit taken from https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-311923766
type Omit<T, K extends keyof T> = Pick<
  T,
  ({ [P in keyof T]: P } &
    { [P in K]: never } & { [x: string]: never; [x: number]: never })[keyof T]
>

let nextComponentId = 0

export default class PreactApp<
  State extends object,
  Providers extends object,
  Reactions extends ReactionsCallback<State, any>,
  Actions extends
    | {
        [namespace: string]: ActionsCallback<State, Providers>
      }
    | ActionsCallback<State, Providers>
> extends App<State, Providers, Reactions, Actions> {
  connect = <
    Props,
    ConnectedActions = Actions extends {
      [namespace: string]: ActionsCallback<Providers, State>
    }
      ? { [Namespace in keyof Actions]: ReturnType<Actions[Namespace]> }
      : Actions extends ActionsCallback<Providers, State>
        ? ReturnType<Actions>
        : any
  >(
    Component: Preact.Component<Props & TConnect<State, ConnectedActions>>
  ): Preact.Component<
    Omit<
      Props & TConnect<State, ConnectedActions>,
      keyof TConnect<State, ConnectedActions>
    >
  > => {
    const componentId = nextComponentId++
    let componentInstanceId = 0
    const instance = this
    const C: any = Component
    const isClassComponent =
      C.prototype && typeof C.prototype.render === 'function'

    if (isClassComponent) {
      const originalRender = C.prototype.render
      const originalWillUnmount = C.prototype.componentWillUnmount

      C.prototype.componentWillUnmount = function() {
        if (this.__mutationListener) {
          instance.eventHub.emitAsync(EventType.COMPONENT_REMOVE, {
            componentId,
            componentInstanceId: this.props.app.__componentInstanceId,
            name: C.name || '',
          })

          this.__mutationListener.dispose()
        }
        originalWillUnmount && originalWillUnmount.call(this)
      }
      C.prototype.render = function() {
        const trackId = instance.trackState()
        const value = originalRender.call(this)
        const paths = instance.clearTrackState(trackId)

        if (this.__mutationListener) {
          this.__mutationListener.update(paths)
        } else {
          instance.eventHub.emitAsync(EventType.COMPONENT_ADD, {
            componentId,
            componentInstanceId: this.props.app.__componentInstanceId,
            name: C.name || '',
            paths: Array.from(paths),
          })
          this.__mutationListener = instance.addMutationListener(
            paths,
            (flushId) => {
              instance.eventHub.emitAsync(EventType.COMPONENT_UPDATE, {
                componentId,
                componentInstanceId: this.props.app.__componentInstanceId,
                name: C.name || '',
                paths: Array.from(paths),
                flushId,
              })
              this.forceUpdate()
            }
          )
        }

        return value
      }
    }

    const Z = class extends Preact.Component<
      Omit<
        Props & TConnect<State, ConnectedActions>,
        keyof TConnect<State, ConnectedActions>
      >
    > {
      __mutationListener: any
      __componentId = componentId
      __componentInstanceId = componentInstanceId++
      __reactionFactory = instance.createReactionFactory(
        C.name || C.displayName
      )

      componentWillUnmount() {
        if (this.__mutationListener) {
          instance.eventHub.emitAsync(EventType.COMPONENT_REMOVE, {
            componentId,
            componentInstanceId: this.__componentInstanceId,
            name: C.name || '',
          })
          this.__mutationListener.dispose()
        }
        this.__reactionFactory.dispose()
      }
      renderStatelessComponent() {
        const trackId = instance.trackState()
        const value = C(
          Object.assign({}, this.props, {
            app: {
              state: instance.state,
              actions: instance.actions,
              reaction: this.__reactionFactory.add,
              __componentInstanceId: this.__componentInstanceId,
            },
          }),
          this.context
        )
        const paths = instance.clearTrackState(trackId)

        if (this.__mutationListener) {
          this.__mutationListener.update(paths)
        } else {
          instance.eventHub.emitAsync(EventType.COMPONENT_ADD, {
            componentId,
            componentInstanceId: this.__componentInstanceId,
            name: C.name || '',
            paths: Array.from(paths),
          })
          this.__mutationListener = instance.addMutationListener(
            paths,
            (flushId) => {
              instance.eventHub.emitAsync(EventType.COMPONENT_UPDATE, {
                componentId,
                componentInstanceId: this.__componentInstanceId,
                name: CDATASection.name || '',
                paths: Array.from(paths),
                flushId,
              })
              this.forceUpdate()
            }
          )
        }

        return value
      }
      renderClassComponent() {
        return h(C, Object.assign({}, this.props, {
          app: {
            state: instance.state,
            actions: instance.actions,
            reaction: this.__reactionFactory.add,
            __componentInstanceId: this.__componentInstanceId,
          },
        }) as any)
      }
      render() {
        if (isClassComponent) {
          return this.renderClassComponent()
        }

        return this.renderStatelessComponent()
      }
    }
    return Z as any
  }
}
